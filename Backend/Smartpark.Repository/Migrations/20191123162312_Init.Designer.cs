// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Smartpark.Repository.Context;

namespace Smartpark.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191123162312_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Smartpark.Domain.Administrador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apellido_adm");

                    b.Property<string>("Contraseña");

                    b.Property<string>("Nombre_adm");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("Smartpark.Domain.Cajero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apellido_Cajero");

                    b.Property<string>("Contraseña");

                    b.Property<DateTime>("Fecha_ingreso");

                    b.Property<string>("Nombre_Cajero");

                    b.Property<string>("Turno_Cajero");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Cajeros");
                });

            modelBuilder.Entity("Smartpark.Domain.Comprobante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("IngresoId");

                    b.Property<int>("cajeroId");

                    b.Property<int>("cod_ingreso");

                    b.Property<int>("espacioId");

                    b.Property<DateTime>("horaFin");

                    b.Property<DateTime>("horaInicio");

                    b.Property<double>("monto");

                    b.HasKey("Id");

                    b.HasIndex("IngresoId");

                    b.ToTable("Comprobantes");
                });

            modelBuilder.Entity("Smartpark.Domain.Espacio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Disponibilidad_espacio");

                    b.Property<string>("Identificador");

                    b.Property<int>("id_parking");

                    b.Property<int?>("parkingId");

                    b.HasKey("Id");

                    b.HasIndex("parkingId");

                    b.ToTable("Espacios");
                });

            modelBuilder.Entity("Smartpark.Domain.Ingreso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CajeroId");

                    b.Property<int>("EspacioId");

                    b.Property<DateTime>("HInicio");

                    b.Property<string>("Placa");

                    b.Property<int>("TarifaId");

                    b.HasKey("Id");

                    b.HasIndex("CajeroId");

                    b.HasIndex("TarifaId");

                    b.ToTable("Ingresos");
                });

            modelBuilder.Entity("Smartpark.Domain.IngresoServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ingresoId");

                    b.Property<int>("servicioId");

                    b.HasKey("Id");

                    b.HasIndex("ingresoId");

                    b.HasIndex("servicioId");

                    b.ToTable("IngresoServicios");
                });

            modelBuilder.Entity("Smartpark.Domain.Parking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Direccion");

                    b.Property<string>("Localizacion");

                    b.Property<string>("Nombre_estacionamiento");

                    b.Property<int>("Numero_Espacios");

                    b.Property<string>("Pais");

                    b.Property<int>("Telefono");

                    b.Property<int>("administradorId");

                    b.HasKey("Id");

                    b.HasIndex("administradorId");

                    b.ToTable("Parkings");
                });

            modelBuilder.Entity("Smartpark.Domain.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Costo_servicio");

                    b.Property<string>("Descripcion");

                    b.Property<string>("Tipo_servicio");

                    b.HasKey("Id");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("Smartpark.Domain.Tarifa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Monto");

                    b.Property<string>("Tipo_vehiculo");

                    b.HasKey("Id");

                    b.ToTable("Tarifas");
                });

            modelBuilder.Entity("Smartpark.Domain.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.Property<string>("Tipo_vehiculo");

                    b.HasKey("Id");

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("Smartpark.Domain.Comprobante", b =>
                {
                    b.HasOne("Smartpark.Domain.Ingreso", "Ingreso")
                        .WithMany()
                        .HasForeignKey("IngresoId");
                });

            modelBuilder.Entity("Smartpark.Domain.Espacio", b =>
                {
                    b.HasOne("Smartpark.Domain.Parking", "parking")
                        .WithMany("espacios")
                        .HasForeignKey("parkingId");
                });

            modelBuilder.Entity("Smartpark.Domain.Ingreso", b =>
                {
                    b.HasOne("Smartpark.Domain.Cajero", "Cajero")
                        .WithMany()
                        .HasForeignKey("CajeroId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smartpark.Domain.Tarifa", "Tarifa")
                        .WithMany()
                        .HasForeignKey("TarifaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smartpark.Domain.IngresoServicio", b =>
                {
                    b.HasOne("Smartpark.Domain.Ingreso", "ingreso")
                        .WithMany()
                        .HasForeignKey("ingresoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smartpark.Domain.Servicio", "servicio")
                        .WithMany()
                        .HasForeignKey("servicioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smartpark.Domain.Parking", b =>
                {
                    b.HasOne("Smartpark.Domain.Administrador", "administrador")
                        .WithMany()
                        .HasForeignKey("administradorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
